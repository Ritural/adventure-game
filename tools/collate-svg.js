const fs = require('fs');
const path = require('path');

/**
 * Promise all
 * @author Loreto Parisi (loretoparisi at gmail dot com)
 */
function promiseAllP(items, block) {
  var promises = [];
  items.forEach(function (item, index) {
    promises.push(function (item, i) {
      return new Promise(function (resolve, reject) {
        return block.apply(this, [item, index, resolve, reject]);
      });
    }(item, index))
  });
  return Promise.all(promises);
} //promiseAll

/**
 * Read files
 * @param dirname string
 * @return Promise
 * @author Loreto Parisi (loretoparisi at gmail dot com)
 * @see http://stackoverflow.com/questions/10049557/reading-all-files-in-a-directory-store-them-in-objects-and-send-the-object
 */
function readFiles(dirname) {
  return new Promise((resolve, reject) => {
    fs.readdir(dirname, function (err, filenames) {
      if (err) return reject(err);
      promiseAllP(filenames,
        (filename, index, resolve, reject) => {
          fs.readFile(path.resolve(dirname, filename), 'utf-8', function (err, content) {
            if (err) return reject(err);
            return resolve({ filename: filename, contents: content });
          });
        })
        .then(results => {
          return resolve(results);
        })
        .catch(error => {
          return reject(error);
        });
    });
  });
}

function splice(originalString, idx, stringToInsert) {
  return originalString.slice(0, idx) + stringToInsert + originalString.slice(idx);
}

readFiles('public/icons/')
  .then(files => {
    const filteredFiles = files.filter((item) => {
      return item.filename.includes('.svg');
    });

    const svgArr = [
      'import * as React from \'react\';',
      '',
      'const Icons = {',
    ];

    filteredFiles.forEach((item) => {
      let objKey = item.filename.replace('.svg', '');

      // Remove some of the bloat in the svgs
      let svg = item.contents;
      svg = svg.replace(/(\n)+/g, '');
      svg = svg.replace(/(\")+/g, '\'');

      const hasStyleTag = svg.includes('<style type=\'text/css\'>');
      // console.log('hasStyleTag', hasStyleTag);

      // Assuming there's only one style tag at this stage
      if (hasStyleTag) {
        // Find the style start tag and class, add a ' after the opening {
        const styleStartMatch = svg.match(/(<style type=\'text\/css\'>\.[a-z]+{)/g);
        const styleStartIndex = svg.indexOf(styleStartMatch[0]) + styleStartMatch[0].length;
        svg = splice(svg, styleStartIndex, '\'');
        
        // Find the style closing tag, add a ' before the closing }
        const styleEndMatch = svg.match(/}<\/style>/g);
        const styleEndIndex = svg.indexOf(styleEndMatch[0]);
        svg = splice(svg, styleEndIndex, '\'');
      }

      const hasIdTag = svg.match(/(id=\'.\')/g);
      // console.log('hasIdTag', hasIdTag);
      
      if (hasIdTag) {
        const iconNamePrefix = `${objKey}-`;

        // Find the id tag and prefix it with the icon name (objKey)
        const idStartMatch = svg.match(/id=\'/g);
        const idIndex = svg.indexOf(idStartMatch[0]) + idStartMatch[0].length;
        svg = splice(svg, idIndex, iconNamePrefix);
        
        // Find url(# ) and prefix it with the icon name (objKey)
        svg = svg.replace(/url\(\#/g, `url(#${iconNamePrefix}` );
      }

      svg = svg.replace('<!-- Generated by IcoMoon.io -->', '');
      svg = svg.replace('xmlns:xlink', 'xmlnsXlink');
      svg = svg.replace('xlink:href', 'xlinkHref');
      svg = svg.replace('stroke-width', 'strokeWidth');
      svg = svg.replace('fill-rule', 'fillRule');
      svg = svg.replace('class', 'className');
      svg = svg.replace(/stop-color/g, 'stopColor');

      // console.log(svg);
      svgArr.push(`  '${objKey}': ${svg},`);
    });

    svgArr.push('};');
    svgArr.push('');
    svgArr.push('export default Icons;');
    svgArr.push('');

    fs.writeFile("public/icons/all.tsx", svgArr.join('\n'), function (err) {
      if (err) {
        return console.error(err);
      }
    });
  })
  .catch(error => {
    console.error(error);
  });
